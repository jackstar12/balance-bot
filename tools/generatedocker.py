import pathlib
from pathlib import Path
import toml
import argparse


def get_poetry(path: str):
    pyproject = toml.load(path + 'pyproject.toml')
    return pyproject['tool']['poetry']


def collect_dependencies(path: str):
    poetry = get_poetry(path)
    projects = {poetry['name']: path}

    dependencies = poetry.get('dependencies', [])

    for dep_name, dep_value in dependencies.items():
        if isinstance(dep_value, dict) and "path" in dep_value:
            # Found a local dependency. Load its pyproject.toml to get its version
            new_path = path + f"{dep_value['path']}/"
            projects.update(collect_dependencies(new_path))

    return projects


def copy_pyproject(path: str, package: str, to: str = None):
    return f'COPY {path}pyproject.toml /{to or "app"}/{path}pyproject.toml\n' \
           f'COPY {path}{package}/__init__.py /{to or "app"}/{path}{package}/__init__.py\n'


def generate_docker_file(root: str):
    pyproject = toml.load(root + 'pyproject.toml')
    docker = pyproject['tool'].get('trade-alpha', {}).get('docker', {})

    dependencies = collect_dependencies(root)
    lines = ''
    for name, path in dependencies.items():
        lines += (
            copy_pyproject(path, name)
        )

    dockerfile = """
# This file has been autogenerated by the generatedocker.py tool.
# Do not edit directly

FROM python:3.10.3-bullseye

RUN curl -sSL https://install.python-poetry.org | python3 -

{lines}

WORKDIR /app/{path}

RUN export PATH=$PATH:$HOME/.local/bin &&\
    poetry config virtualenvs.create false &&\
    poetry install --without dev

COPY {path} /app/{path}
COPY lib /app/lib/

{extra}
{command}
""".format(lines=lines,
           path=root,
           extra=docker.get('include', ''),
           command=docker.get('command', 'CMD [ "python3", "__main__.py" ]'))

    print('Writing...')
    with open(root + 'Dockerfile', mode="w") as file:
        file.write(dockerfile)

    print('Done writing Dockerfile')


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description="Release Poetry package")
    parser.add_argument("--path", help="path to the project")
    args = parser.parse_args()
    generate_docker_file(args.path)
